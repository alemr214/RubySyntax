/* Generated By:JavaCC: Do not edit this line. SintaxisConstants.java */
package Analizador;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SintaxisConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BEGIN = 5;
  /** RegularExpression Id. */
  int END = 6;
  /** RegularExpression Id. */
  int CASE = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int ELSIF = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int UNLESS = 11;
  /** RegularExpression Id. */
  int UNTIL = 12;
  /** RegularExpression Id. */
  int WHEN = 13;
  /** RegularExpression Id. */
  int WHILE = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int NEXT = 17;
  /** RegularExpression Id. */
  int BREAK = 18;
  /** RegularExpression Id. */
  int REDO = 19;
  /** RegularExpression Id. */
  int RETRY = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int YIELD = 22;
  /** RegularExpression Id. */
  int RESCUE = 23;
  /** RegularExpression Id. */
  int ENSURE = 24;
  /** RegularExpression Id. */
  int IN = 25;
  /** RegularExpression Id. */
  int TRUE = 26;
  /** RegularExpression Id. */
  int FALSE = 27;
  /** RegularExpression Id. */
  int NIL = 28;
  /** RegularExpression Id. */
  int TKAND = 29;
  /** RegularExpression Id. */
  int TKOR = 30;
  /** RegularExpression Id. */
  int TKNOT = 31;
  /** RegularExpression Id. */
  int CLASS = 32;
  /** RegularExpression Id. */
  int MODULE = 33;
  /** RegularExpression Id. */
  int DEF = 34;
  /** RegularExpression Id. */
  int SELF = 35;
  /** RegularExpression Id. */
  int SUPER = 36;
  /** RegularExpression Id. */
  int NEW = 37;
  /** RegularExpression Id. */
  int ALIAS = 38;
  /** RegularExpression Id. */
  int DEFINED = 39;
  /** RegularExpression Id. */
  int UNDEF = 40;
  /** RegularExpression Id. */
  int PUBLIC = 41;
  /** RegularExpression Id. */
  int PRIVATE = 42;
  /** RegularExpression Id. */
  int PROTECTED = 43;
  /** RegularExpression Id. */
  int INCLUDE = 44;
  /** RegularExpression Id. */
  int EXTEND = 45;
  /** RegularExpression Id. */
  int REQUIRE = 46;
  /** RegularExpression Id. */
  int SET = 47;
  /** RegularExpression Id. */
  int HASH = 48;
  /** RegularExpression Id. */
  int MATRIX = 49;
  /** RegularExpression Id. */
  int THEN = 50;
  /** RegularExpression Id. */
  int PUTS = 51;
  /** RegularExpression Id. */
  int PRINT = 52;
  /** RegularExpression Id. */
  int GETS = 53;
  /** RegularExpression Id. */
  int PLUS = 54;
  /** RegularExpression Id. */
  int MINUS = 55;
  /** RegularExpression Id. */
  int MULTIPLICATION = 56;
  /** RegularExpression Id. */
  int DIVISION = 57;
  /** RegularExpression Id. */
  int MODULUS = 58;
  /** RegularExpression Id. */
  int EXPONENTIATION = 59;
  /** RegularExpression Id. */
  int EQUALTO = 60;
  /** RegularExpression Id. */
  int NOTEQUAL = 61;
  /** RegularExpression Id. */
  int LESSTHAN = 62;
  /** RegularExpression Id. */
  int GREATERTHAN = 63;
  /** RegularExpression Id. */
  int LESSTHANEQUAL = 64;
  /** RegularExpression Id. */
  int GREATERTHANEQUAL = 65;
  /** RegularExpression Id. */
  int SPACESHIP = 66;
  /** RegularExpression Id. */
  int STRICTEQUAL = 67;
  /** RegularExpression Id. */
  int OPAND = 68;
  /** RegularExpression Id. */
  int OPOR = 69;
  /** RegularExpression Id. */
  int OPNOT = 70;
  /** RegularExpression Id. */
  int ADDASSIGNMENT = 71;
  /** RegularExpression Id. */
  int SUBASSIGNMENT = 72;
  /** RegularExpression Id. */
  int MULASSIGNMENT = 73;
  /** RegularExpression Id. */
  int DIVASSIGNMENT = 74;
  /** RegularExpression Id. */
  int MODASSIGNMENT = 75;
  /** RegularExpression Id. */
  int EXPASSIGNMENT = 76;
  /** RegularExpression Id. */
  int BITWISEAND = 77;
  /** RegularExpression Id. */
  int BITWISEOR = 78;
  /** RegularExpression Id. */
  int BITWISEXOR = 79;
  /** RegularExpression Id. */
  int BITWISENOT = 80;
  /** RegularExpression Id. */
  int BITWISELEFTSHIFT = 81;
  /** RegularExpression Id. */
  int BITWISERIGHTSHIFT = 82;
  /** RegularExpression Id. */
  int INCLUSIVERANGE = 83;
  /** RegularExpression Id. */
  int EXCLUSIVERANGE = 84;
  /** RegularExpression Id. */
  int EQUAL = 85;
  /** RegularExpression Id. */
  int LPARENT = 86;
  /** RegularExpression Id. */
  int RPARENT = 87;
  /** RegularExpression Id. */
  int LBRACKET = 88;
  /** RegularExpression Id. */
  int RBRACKET = 89;
  /** RegularExpression Id. */
  int LBRACE = 90;
  /** RegularExpression Id. */
  int RBRACE = 91;
  /** RegularExpression Id. */
  int COLON = 92;
  /** RegularExpression Id. */
  int COMMA = 93;
  /** RegularExpression Id. */
  int DOT = 94;
  /** RegularExpression Id. */
  int COMMENT = 95;
  /** RegularExpression Id. */
  int INTEGERS = 96;
  /** RegularExpression Id. */
  int DECIMAL = 97;
  /** RegularExpression Id. */
  int COMPLEX = 98;
  /** RegularExpression Id. */
  int RATIONAL = 99;
  /** RegularExpression Id. */
  int IDENTIFIER = 100;
  /** RegularExpression Id. */
  int STRING = 101;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"begin\"",
    "\"end\"",
    "\"case\"",
    "\"else\"",
    "\"elsif\"",
    "\"if\"",
    "\"unless\"",
    "\"until\"",
    "\"when\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "\"next\"",
    "\"break\"",
    "\"redo\"",
    "\"retry\"",
    "\"return\"",
    "\"yield\"",
    "\"rescue\"",
    "\"ensure\"",
    "\"in\"",
    "\"true\"",
    "\"false\"",
    "\"nil\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"class\"",
    "\"module\"",
    "\"def\"",
    "\"self\"",
    "\"super\"",
    "\"new\"",
    "\"alias\"",
    "\"defined\"",
    "\"undef\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"include\"",
    "\"extend\"",
    "\"require\"",
    "\"Set\"",
    "\"Hash\"",
    "\"Matrix\"",
    "\"then\"",
    "\"puts\"",
    "\"print\"",
    "\"gets\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"**\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<=>\"",
    "\"===\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"**=\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"<<\"",
    "\">>\"",
    "\"..\"",
    "\"...\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "<COMMENT>",
    "<INTEGERS>",
    "<DECIMAL>",
    "<COMPLEX>",
    "<RATIONAL>",
    "<IDENTIFIER>",
    "<STRING>",
  };

}
