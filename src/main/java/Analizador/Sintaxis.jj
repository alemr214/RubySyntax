options {
  IGNORE_CASE = true;
  STATIC = false;
  BUILD_PARSER = true;
  LOOKAHEAD = 2;
}

PARSER_BEGIN(Sintaxis)
package Analizador;
public class Sintaxis {}
PARSER_END(Sintaxis)

/** Inicio del lexico **/

//Tokens omitidos
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
}

//Tokens de palabras reservadas
TOKEN : {
    < BEGIN: "begin"> {System.out.println("BEGIN -> " + image + "\n");}
    | < END: "end"> {System.out.println("END -> " + image + "\n");}
    | < CASE: "case"> {System.out.println("CASE -> " + image + "\n");}
    | < ELSE: "else"> {System.out.println("ELSE -> " + image + "\n");}
    | < ELSIF: "elsif"> {System.out.println("ELSIF -> " + image + "\n");}
    | < IF: "if"> {System.out.println("IF -> " + image + "\n");}
    | < UNLESS: "unless"> {System.out.println("UNLESS -> " + image + "\n");}
    | < UNTIL: "until"> {System.out.println("UNTIL -> " + image + "\n");}
    | < WHEN: "when"> {System.out.println("WHEN -> " + image + "\n");}
    | < WHILE: "while"> {System.out.println("WHILE -> " + image + "\n");}
    | < FOR: "for"> {System.out.println("FOR -> " + image + "\n");}
    | < DO: "do"> {System.out.println("DO -> " + image + "\n");}
    | < NEXT: "next"> {System.out.println("NEXT -> " + image + "\n");}
    | < BREAK: "break"> {System.out.println("BREAK -> " + image + "\n");}
    | < REDO: "redo"> {System.out.println("REDO -> " + image + "\n");}
    | < RETRY: "retry"> {System.out.println("RETRY -> " + image + "\n");}
    | < RETURN: "return"> {System.out.println("RETURN -> " + image + "\n");}
    | < YIELD: "yield"> {System.out.println("YIELD -> " + image + "\n");}
    | < RESCUE: "rescue"> {System.out.println("RESCUE -> " + image + "\n");}
    | < ENSURE: "ensure"> {System.out.println("ENSURE -> " + image + "\n");}
    | < IN: "in"> {System.out.println("IN -> " + image + "\n");}
    | < TRUE: "true"> {System.out.println("TRUE -> " + image + "\n");}
    | < FALSE: "false"> {System.out.println("FALSE -> " + image + "\n");}
    | < NIL: "nil"> {System.out.println("NIL -> " + image + "\n");}
    | < TKAND: "and"> {System.out.println("AND -> " + image + "\n");}
    | < TKOR: "or"> {System.out.println("OR -> " + image + "\n");}
    | < TKNOT: "not"> {System.out.println("NOT -> " + image + "\n");}
    | < CLASS: "class"> {System.out.println("CLASS -> " + image + "\n");}
    | < MODULE: "module"> {System.out.println("MODULE -> " + image + "\n");}
    | < DEF: "def"> {System.out.println("DEF -> " + image + "\n");}
    | < SELF: "self"> {System.out.println("SELF -> " + image + "\n");}
    | < SUPER: "super"> {System.out.println("SUPER -> " + image + "\n");}
    | < NEW: "new"> {System.out.println("NEW -> " + image + "\n");}
    | < ALIAS: "alias"> {System.out.println("ALIAS -> " + image + "\n");}
    | < DEFINED: "defined"> {System.out.println("DEFINED -> " + image + "\n");}
    | < UNDEF: "undef"> {System.out.println("UNDEF -> " + image + "\n");}
    | < PUBLIC: "public"> {System.out.println("PUBLIC -> " + image + "\n");}
    | < PRIVATE: "private"> {System.out.println("PRIVATE -> " + image + "\n");}
    | < PROTECTED: "protected"> {System.out.println("PROTECTED -> " + image + "\n");}
    | < INCLUDE: "include"> {System.out.println("INCLUDE -> " + image + "\n");}
    | < EXTEND: "extend"> {System.out.println("EXTEND -> " + image + "\n");}
    | < REQUIRE: "require"> {System.out.println("REQUIRE -> " + image + "\n");}
    | < SET: "Set"> {System.out.println("SET -> " + image + "\n");}
    | < HASH: "Hash"> {System.out.println("HASH -> " + image + "\n");}
    | < MATRIX: "Matrix"> {System.out.println("MATRIX -> " + image + "\n");}
    | < THEN: "then"> {System.out.println("THEN -> " + image + "\n");}
    | < PUTS: "puts"> {System.out.println("PUTS -> " + image + "\n");}
    | < PRINT: "print"> {System.out.println("PRINT -> " + image + "\n");}
    | < GETS: "gets"> {System.out.println("GETS -> " + image + "\n");}
}

//Tokens de operadores
TOKEN : {
//OPERADORES ARIMETICOS
    < PLUS: "+" > {System.out.println("PLUS -> " + image + "\n");}
    | < MINUS: "-" > {System.out.println("MINUS -> " + image + "\n");}
    | < MULTIPLICATION: "*" > {System.out.println("MULTIPLICATION -> " + image + "\n");}
    | < DIVISION: "/" > {System.out.println("DIVISION -> " + image + "\n");}
    | < MODULUS: "%" > {System.out.println("MODULUS -> " + image + "\n");}
    | < EXPONENTIATION: "**" > {System.out.println("EXPONENTIATION -> " + image + "\n");}
    //OPERADORES DE COMPARACION
    | < EQUALTO: "==" > {System.out.println("EQUALTO -> " + image + "\n");}
    | < NOTEQUAL: "!=" > {System.out.println("NOTEQUAL -> " + image + "\n");}
    | < LESSTHAN: "<" > {System.out.println("LESSTHAN -> " + image + "\n");}
    | < GREATERTHAN: ">" > {System.out.println("GREATERTHAN -> " + image + "\n");}
    | < LESSTHANEQUAL: "<=" > {System.out.println("LESSTHANEQUAL -> " + image + "\n");}
    | < GREATERTHANEQUAL: ">=" > {System.out.println("GREATERTHANEQUAL -> " + image + "\n");}
    | < SPACESHIP: "<=>" > {System.out.println("SPACESHIP -> " + image + "\n");}
    | < STRICTEQUAL: "===" > {System.out.println("STRICTEQUAL -> " + image + "\n");}
    //OPERDORES LOGICOS
    | < OPAND: "&&" > {System.out.println("OPAND -> " + image + "\n");}
    | < OPOR: "||" > {System.out.println("OPOR -> " + image + "\n");}
    | < OPNOT: "!" > {System.out.println("OPNOT -> " + image + "\n");}
    //OPERADORES DE ASIGNACION
    | < ADDASSIGNMENT: "+=" > {System.out.println("ADDASSIGNMENT -> " + image + "\n");}
    | < SUBASSIGNMENT: "-=" > {System.out.println("SUBASSIGNMENT -> " + image + "\n");}
    | < MULASSIGNMENT: "*=" > {System.out.println("MULASSIGNMENT -> " + image + "\n");}
    | < DIVASSIGNMENT: "/=" > {System.out.println("DIVASSIGNMENT -> " + image + "\n");}
    | < MODASSIGNMENT: "%=" > {System.out.println("MODASSIGNMENT -> " + image + "\n");}
    | < EXPASSIGNMENT: "**=" > {System.out.println("EXPASSIGNMENT -> " + image + "\n");}
    //OPERADORES DE BITWISE
    | < BITWISEAND: "&" > {System.out.println("BITWISEAND -> " + image + "\n");}
    | < BITWISEOR: "|" > {System.out.println("BITWISEOR -> " + image + "\n");}
    | < BITWISEXOR: "^" > {System.out.println("BITWISEXOR -> " + image + "\n");}
    | < BITWISENOT: "~" > {System.out.println("BITWISENOT -> " + image + "\n");}
    | < BITWISELEFTSHIFT: "<<" > {System.out.println("BITWISELEFTSHIFT -> " + image + "\n");}
    | < BITWISERIGHTSHIFT: ">>" > {System.out.println("BITWISERIGHTSHIFT -> " + image + "\n");}
    //OPERADORES DE RANGO
    | < INCLUSIVERANGE: ".." > {System.out.println("INCLUSIVERANGE -> " + image + "\n");}
    | < EXCLUSIVERANGE: "..." > {System.out.println("EXCLUSIVERANGE -> " + image + "\n");}
    | <EQUAL: "="> {System.out.println("EQUAL -> " + image + "\n");}
}

//Tokens de simbolos
TOKEN : {
    < LPARENT: "(" > {System.out.println("LPARENT -> " + image + "\n");}
    | < RPARENT: ")" > {System.out.println("RPARENT -> " + image + "\n");}
    | < LBRACKET: "[" > {System.out.println("LBRACKET -> " + image + "\n");}
    | < RBRACKET: "]" > {System.out.println("RBRACKET -> " + image + "\n");}
    | < LBRACE: "{" > {System.out.println("LBRACE -> " + image + "\n");}
    | < RBRACE: "}" > {System.out.println("RBRACE -> " + image + "\n");}
    | < COLON: ":" > {System.out.println("COLON -> " + image + "\n");}
    | < COMMA: "," > {System.out.println("COMMA -> " + image + "\n");}
    | < DOT: "." > {System.out.println("DOT -> " + image + "\n");}
}

//Tokens de comentarios
TOKEN : {
    < COMMENT: "#" (~["\n"])* > {System.out.println("COMMENT -> " + image + "\n");}
}


//Tokens de numeros
TOKEN : {
    < INTEGERS: (["0"-"9"])+> {System.out.println("INTEGERS -> " + image + "\n");}
    | < DECIMAL: <INTEGERS> "." <INTEGERS> > {System.out.println("DECIMAL -> " + image + "\n");}
    | < COMPLEX: (<INTEGERS> | <DECIMAL> ) ("i" | "I")> {System.out.println("COMPLEX -> " + image + "\n");}
    | < RATIONAL: <INTEGERS> "/" <INTEGERS>> {System.out.println("RATIONAL -> " + image + "\n");}
}

//Tokens de cadenas de texto
TOKEN : {
    < IDENTIFIER: (["a"-"z"] | ["A"-"Z"] | "_") (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")* > {System.out.println("IDENTIFIER -> " + image + "\n");}
    | < STRING: "\'"(~["\'"])*"\'" | "\""(~["\""])*"\""> {System.out.println("STRING -> " + image + "\n");}
}
/** Fin Lexico */


void parse(): {}
{
    (statement())+
    | <BEGIN> (statement())+ <END>
}

void statement(): {}
{
    variableDeclaration()
    | functionDeclaration()
    | controlStructure()
    | outputStatement()
    | <COMMENT>
}

void variableDeclaration(): {}
{
    <IDENTIFIER> <EQUAL>  (operation() | functionCall())
}

void value(): {}
{
    <IDENTIFIER>
    | <INTEGERS>
    | <DECIMAL>
    | <STRING>
    | <TRUE>
    | <FALSE>
    | <NIL>
}

void operation(): {}
{
    (value() | parenthesesOperation()) (operator() (value() | parenthesesOperation()))*
}

void parenthesesOperation(): {}
{
    <LPARENT> operation() <RPARENT>
}

void operator(): {}
{
    <PLUS>
    | <MINUS>
    | <MULTIPLICATION>
    | <DIVISION>
    | <MODULUS>
    | <EXPONENTIATION>
}

void functionCall(): {}
{
    <IDENTIFIER> <LPARENT> (parameters())? <RPARENT>
}

void parameters(): {}
{
    value() (<COMMA> value())*
}

void functionDeclaration(): {}
{
    <DEF> <IDENTIFIER> <LPARENT> (parameters())? <RPARENT> (statement())+ (<RETURN> value())? <END>
}

void controlStructure(): {}
{
    ifStatement()
    | forStatement()
    | whileStatement()
    | caseStatement()
}

void ifStatement(): {}
{
    <IF> condition() (statement())+ [elseClause()]
}

void condition(): {}
{
    (<OPNOT>)? value()  (relationalOperator() value() [logicalOperator() condition()])?
}

void relationalOperator(): {}
{
    <EQUALTO>
    | <NOTEQUAL>
    | <LESSTHAN>
    | <GREATERTHAN>
    | <LESSTHANEQUAL>
    | <GREATERTHANEQUAL>
}

void logicalOperator(): {}
{
    <OPAND>
    | <OPOR>
    | <OPNOT>
}

void elseClause(): {}
{
    <ELSE> (statement())+
    | <ELSIF> condition() (statement())+ [elseClause()]
}

void forStatement(): {}
{
    <FOR> <IDENTIFIER> (<COMMA> <IDENTIFIER>)* <IN> (<IDENTIFIER> | <INTEGERS>) (range() <INTEGERS>)? (<DO>)? (statement())+ <END>
}

void range(): {}
{
    <INCLUSIVERANGE>
    | <EXCLUSIVERANGE>
}

void whileStatement(): {}
{
    <WHILE> condition() (<DO>)? (statement())+ <END>
}

void caseStatement(): {}
{
    <CASE> <IDENTIFIER> (<WHEN> value() (statement())+)+ [<ELSE> (statement())+] <END>
}

void outputStatement(): {}
{
    (<PUTS> | <PRINT>) <STRING>
}